name: Auto Merge PR

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, synchronize, labeled]
  check_suite:
    types: [completed]
  status: {}

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  add-approved-label:
    if: |
      github.event.issue.pull_request &&
      (github.event.comment.body == '/approve' || contains(github.event.comment.body, '/approve'))
    runs-on: ubuntu-latest
    steps:
      - name: Add approved label
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Comment body:', context.payload.comment.body);
            console.log('PR number:', context.issue.number);
            console.log('Adding approved label...');
            
            try {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['approved']
              });
              console.log('Successfully added approved label');
            } catch (error) {
              console.log('Failed to add label:', error.message);
              throw error;
            }

  auto-merge:
    if: |
      github.event.pull_request ||
      (github.event.check_suite && github.event.check_suite.conclusion == 'success') ||
      github.event.status
    runs-on: ubuntu-latest
    steps:
      - name: Check if PR is ready to merge
        uses: actions/github-script@v7
        with:
          script: |
            // Get PR number
            let prNumber;
            if (context.payload.pull_request) {
              prNumber = context.payload.pull_request.number;
            } else if (context.payload.check_suite) {
              const prs = context.payload.check_suite.pull_requests;
              if (prs.length > 0) {
                prNumber = prs[0].number;
              }
            } else if (context.payload.status) {
              // Try to extract PR number from status context
              const branches = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.payload.status.sha
              });
              if (branches.data.length > 0) {
                prNumber = branches.data[0].number;
              }
            }
            
            if (!prNumber) {
              console.log('No PR number found');
              return;
            }
            
            console.log('Checking PR #' + prNumber + ' for auto-merge eligibility');
            
            // Get PR details
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            console.log('PR state:', pr.data.state);
            console.log('PR mergeable:', pr.data.mergeable);
            console.log('PR labels:', pr.data.labels.map(l => l.name));
            
            // Check if PR has approved label
            const hasApprovedLabel = pr.data.labels.some(label => label.name === 'approved');
            
            if (!hasApprovedLabel) {
              console.log('PR does not have approved label - skipping merge');
              return;
            }
            
            console.log('PR has approved label - checking tests...');
            
            // Check if all required checks are passing
            const checks = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.data.head.sha
            });
            
            const allChecksPassed = checks.data.check_runs.every(check => 
              check.status === 'completed' && check.conclusion === 'success'
            );
            
            if (!allChecksPassed) {
              console.log('Not all checks are passing');
              return;
            }
            
            // Merge the PR
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: 'squash'
              });
              console.log('PR merged successfully');
              
              // Delete the branch after successful merge
              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${pr.data.head.ref}`
                });
                console.log(`Branch ${pr.data.head.ref} deleted successfully`);
              } catch (deleteError) {
                console.log(`Failed to delete branch ${pr.data.head.ref}:`, deleteError.message);
              }
            } catch (error) {
              console.log('Failed to merge PR:', error.message);
            }